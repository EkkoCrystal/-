{"remainingRequest":"C:\\Users\\ekko.guo\\Desktop\\collection\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ekko.guo\\Desktop\\collection\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\ekko.guo\\Desktop\\collection\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\ekko.guo\\Desktop\\collection\\src\\utils\\request.js","mtime":1647667239007},{"path":"C:\\Users\\ekko.guo\\Desktop\\collection\\babel.config.js","mtime":1638519783748},{"path":"C:\\Users\\ekko.guo\\Desktop\\collection\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ekko.guo\\Desktop\\collection\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\ekko.guo\\Desktop\\collection\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:\\\\Users\\\\ekko.guo\\\\Desktop\\\\collection\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nvar _elementUi = require(\"element-ui\");\n\n// import store from '@/store'\n// import { getToken } from '@/utils/auth'\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // baseURL: Vue.prototype.baseConfig.serviceUrl,\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 30000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (_vue.default.prototype.$baseConfig !== undefined && _vue.default.prototype.$baseConfig !== null) {\n    if (_vue.default.prototype.$baseConfig.serviceUrl !== null && _vue.default.prototype.$baseConfig.serviceUrl !== undefined && _vue.default.prototype.$baseConfig.serviceUrl !== '') {\n      config.url = _vue.default.prototype.$baseConfig.serviceUrl + config.url;\n    }\n  } // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsIm5pY2tOYW1lIjpudWxsLCJvcGVuSWQiOm51bGwsInNjb3BlIjpbImFsbCJdLCJyb2xlcyI6W10sInVzZXJUeXBlIjoiYWRtaW5fdXNlciIsImV4cCI6MTY0NzY1MTQ0MiwidXNlcklkIjoxLCJqdGkiOiI5YmQ0ZjBmNy00NjMxLTQyYzktYmIxNi01NDA2MTBlNWU2MzkiLCJwcm92aWRlck5hbWUiOm51bGwsImNsaWVudF9pZCI6IkFDT05fSU5ORVJfU0VSVkVSIn0.Mw7YtWtrOLX209ubFzup3DSNORYR-9otDtOaZJ2UuT0'\n  // if (token) {\n  //   //   // let each request carry token\n  //   //   // ['X-Token'] is a custom headers key\n  //   //   // please modify it according to the actual situation\n  //   //   // config.headers['X-Token'] = getToken()\n  //   config.headers.common['Authorization'] = 'Bearer ' + token\n  //   // config.headers.Authorization = 'Bearer ' + token\n  //   // console.log(config.headers)\n  // }\n\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  var res = response.data;\n  console.log(response); // if the custom code is not 20000, it is judged as an error.\n\n  if (response.status !== 200 || res.code !== '0') {\n    console.log('34343434'); // if (response.status !== 200) {\n    // Message({\n    //   message: res.message || 'Error',\n    //   type: 'error',\n    //   duration: 5 * 1000\n    // })\n    // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n    // if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n\n    if (res.code === '402') {\n      //   // to re-login\n      console.log('gggggggggggg');\n      console.log(res); // store.dispatch('user/resetToken').then(() => {\n      //   location.reload()\n      // })\n      // MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n      //   confirmButtonText: 'Re-Login',\n      //   cancelButtonText: 'Cancel',\n      //   type: 'warning'\n      // }).then(() => {\n      // })\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}